package game.gameLogic;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Wein
 */
//import practice.GameState;
//import java.lang.Thread;
import Sounds.BGMusic;
import game.Menu;
import game.characters.Character;
import game.ui.PVPCharacterPicking;
import java.awt.Button;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

//import javax.swing.Timer;

public class pvp extends javax.swing.JFrame implements GameState {

    /**
     * Creates new form pvp
     */
    Character objChar1 = new Character();
    Character objChar2 = new Character();
    String ch;
    public pvp() {}
    
    public pvp(int choice1,int choice2, int background,String ch) {
        initComponents();
        hideMenus();
        this.choice1=choice1;
        this.choice2=choice2;
        this.bg=background;
        this.ch=ch;
        initBackground(background);
        objChar1.setChoice(choice1);
        objChar2.setChoice(choice2);        
        initCharacters(choice1,choice2);
        bgm.playBackgroundAudio(fileName);
        playerHp();
        timer();
        
        lblOrbs1.setText("Orbs "+ player1Orbs);
        lblOrbs2.setText("Orbs "+ player2Orbs);
  
        DisableButtons();
        
        try{
            File fontStyle = new File("src/fonts/8-bit-hud.ttf");
            Font font = Font.createFont(Font.TRUETYPE_FONT,fontStyle);
            
            Font timerFont = font.deriveFont(14f);
            lblTime.setFont(timerFont);

            Font nameFont = font.deriveFont(12f);
            p1Name.setFont(nameFont);
            p2Name.setFont(nameFont);
            
            Font orbFont = font.deriveFont(16f);
            lblOrbs1.setFont(orbFont);
            lblOrbs2.setFont(orbFont);
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        
        
        
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    int choice1;
    int choice2;
    int bg;
    int checker=1;
    int player1hp=100;
    int player2hp=100;
    int skill;
    int turncount=0;
    int counter=31;
    int counter2=1000;
    int pauseCounter=0;
    int pause=0;
    int player1Orbs=1;
    int player2Orbs=1;
    String fileName="src/Sounds/pvp2.wav";
    BGMusic bgm=new BGMusic(1);
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlWin = new javax.swing.JPanel();
        btnCharPicking = new javax.swing.JButton();
        btnRematch = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        btnUnpause = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        btnPause = new javax.swing.JButton();
        lblPlayer1 = new javax.swing.JLabel();
        pgPlayer2 = new javax.swing.JProgressBar();
        p1Name = new javax.swing.JLabel();
        pgPlayer1 = new javax.swing.JProgressBar();
        p2Name = new javax.swing.JLabel();
        lblPlayer2 = new javax.swing.JLabel();
        lblOrbs1 = new javax.swing.JLabel();
        lblOrbs2 = new javax.swing.JLabel();
        jpchar1Skill1 = new javax.swing.JPanel();
        Skill1p1 = new javax.swing.JLabel();
        jpchar1Skill2 = new javax.swing.JPanel();
        Skill2p1 = new javax.swing.JLabel();
        jpchar1Skill3 = new javax.swing.JPanel();
        Skill3p1 = new javax.swing.JLabel();
        jpchar1Skill4 = new javax.swing.JPanel();
        Skill4p1 = new javax.swing.JLabel();
        jpchar2Skill1 = new javax.swing.JPanel();
        Skill1p2 = new javax.swing.JLabel();
        jpchar2Skill2 = new javax.swing.JPanel();
        Skill2p2 = new javax.swing.JLabel();
        jpchar2Skill3 = new javax.swing.JPanel();
        Skill3p2 = new javax.swing.JLabel();
        jpchar2Skill4 = new javax.swing.JPanel();
        Skill4p2 = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Galactic Wanderers");
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlWin.setBackground(new java.awt.Color(0, 0, 0));
        pnlWin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCharPicking.setText("Character Picking");
        btnCharPicking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCharPickingActionPerformed(evt);
            }
        });
        pnlWin.add(btnCharPicking, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, -1, -1));

        btnRematch.setText("Rematch");
        btnRematch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRematchActionPerformed(evt);
            }
        });
        pnlWin.add(btnRematch, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 230, -1, -1));

        btnReturn.setText("Menu");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        pnlWin.add(btnReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 350, -1, -1));

        getContentPane().add(pnlWin, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 510, 570));

        btnUnpause.setText("Unpause");
        btnUnpause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnpauseActionPerformed(evt);
            }
        });
        getContentPane().add(btnUnpause, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 40, -1, -1));

        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.setText("30");
        getContentPane().add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 120, 43, -1));

        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        getContentPane().add(btnPause, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 63, -1));

        lblPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Brett/idle/char-brettIdle-unscreen.gif"))); // NOI18N
        getContentPane().add(lblPlayer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 225, 225));

        pgPlayer2.setBackground(new java.awt.Color(255, 255, 255));
        pgPlayer2.setForeground(new java.awt.Color(255, 51, 51));
        pgPlayer2.setString("");
        getContentPane().add(pgPlayer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 100, 500, 23));

        p1Name.setForeground(new java.awt.Color(255, 255, 255));
        p1Name.setText("Player 1");
        getContentPane().add(p1Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 235, -1));

        pgPlayer1.setBackground(new java.awt.Color(255, 255, 255));
        pgPlayer1.setForeground(new java.awt.Color(255, 0, 0));
        pgPlayer1.setString("");
        pgPlayer1.setStringPainted(true);
        getContentPane().add(pgPlayer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 540, 23));

        p2Name.setForeground(new java.awt.Color(255, 255, 255));
        p2Name.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        p2Name.setText("Player 2");
        p2Name.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(p2Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 70, 256, -1));

        lblPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Gabe/Idle/char-gabeIdle-unscreen.gif"))); // NOI18N
        getContentPane().add(lblPlayer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 230, 225, 225));

        lblOrbs1.setForeground(new java.awt.Color(255, 255, 255));
        lblOrbs1.setText("jLabel1");
        getContentPane().add(lblOrbs1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 630, -1, -1));

        lblOrbs2.setForeground(new java.awt.Color(255, 255, 255));
        lblOrbs2.setText("jLabel1");
        getContentPane().add(lblOrbs2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 630, -1, -1));

        jpchar1Skill1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar1Skill1MouseClicked(evt);
            }
        });
        jpchar1Skill1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar1Skill1.add(Skill1p1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar1Skill1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 100, 80));

        jpchar1Skill2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar1Skill2MouseClicked(evt);
            }
        });
        jpchar1Skill2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar1Skill2.add(Skill2p1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar1Skill2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 500, 100, 80));

        jpchar1Skill3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar1Skill3MouseClicked(evt);
            }
        });
        jpchar1Skill3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar1Skill3.add(Skill3p1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar1Skill3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 500, 100, 80));

        jpchar1Skill4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar1Skill4MouseClicked(evt);
            }
        });
        jpchar1Skill4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar1Skill4.add(Skill4p1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar1Skill4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 500, 100, 80));

        jpchar2Skill1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar2Skill1MouseClicked(evt);
            }
        });
        jpchar2Skill1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar2Skill1.add(Skill1p2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar2Skill1, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 500, 100, 80));

        jpchar2Skill2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar2Skill2MouseClicked(evt);
            }
        });
        jpchar2Skill2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar2Skill2.add(Skill2p2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar2Skill2, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 500, 100, 80));

        jpchar2Skill3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar2Skill3MouseClicked(evt);
            }
        });
        jpchar2Skill3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar2Skill3.add(Skill3p2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar2Skill3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 500, 100, 80));

        jpchar2Skill4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpchar2Skill4MouseClicked(evt);
            }
        });
        jpchar2Skill4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpchar2Skill4.add(Skill4p2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 80));

        getContentPane().add(jpchar2Skill4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 500, 100, 80));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background/pvpScreen.gif"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 710));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void hideMenus(){
    pnlWin.setVisible(false);
}
    public void WinMenu(){
        lblPlayer1.setVisible(false);
        lblPlayer2.setVisible(false); 
        p1Name.setVisible(false);
        p2Name.setVisible(false);
        lblTime.setVisible(false);
        pgPlayer1.setVisible(false);
        pgPlayer2.setVisible(false);
        setVisibleFalse();
        pnlWin.setVisible(true);
    }
    public void initBackground(int background) {
        switch (background)
        {
            case 1: lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background/brettbg.gif")));              
                break;
            case 2: lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background/gabebg.gif")));
                break;
            case 3: lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background/miganbg.gif")));
                break;
            case 4: lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background/sirKhaibg.gif")));
                break;
            default:;
        }
    }
    
    public void initCharacters(int choice1, int choice2) {
        switch (choice1)
        {
            case 1: lblPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Brett/idle/char-brettIdle-unscreen.gif")));                    
                break;
            case 2: lblPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Gabe/idle/char-gabeIdle-unscreen.gif")));
                break;
            case 3: lblPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Migantron/idle/char-miganIdle-unscreen.gif")));
                break;
            case 4: lblPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Sir Kai/idle/char-skIdle-unscreen.gif")));
                break;
            default:;
        }
        
        Skill1p1.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar1.getSkill1())));
        Skill2p1.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar1.getSkill2())));
        Skill3p1.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar1.getSkill3())));
        Skill4p1.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar1.getSkill4())));
        Skill1p2.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar2.getSkill1())));
        Skill2p2.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar2.getSkill2())));
        Skill3p2.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar2.getSkill3())));
        Skill4p2.setIcon(new javax.swing.ImageIcon(getClass().getResource(objChar2.getSkill4())));
        
        switch (choice2)
        {
            case 1: lblPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Brett/idle/char-brettIdle-mir-unscreen.gif")));
                break;
            case 2: lblPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Gabe/idle/char-gabeIdle-mir-unscreen.gif")));
                break;
            case 3: lblPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Migantron/idle/char-miganIdle-mir-unscreen.gif")));
                break;
            case 4: lblPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Sir Kai/idle/char-skIdle-mir-unscreen.gif")));
                break;
            default:;
        }
        
    }
    
    public void characterDamage(){
     //wala pay character
    }
   public void setBtnVisible(Button btn){
       btn.setVisible(true);
   }
   
    @Override
    public void turn(){
        if(turncount==1){
            jpchar1Skill1.setVisible(true);
            jpchar1Skill2.setVisible(true);
            jpchar1Skill3.setVisible(true);
            jpchar1Skill4.setVisible(true);            
      
            jpchar2Skill1.setVisible(false);
            jpchar2Skill2.setVisible(false);
            jpchar2Skill3.setVisible(false);
            jpchar2Skill4.setVisible(false);
            
            counter=31;
        
        } else if(turncount==2){
            jpchar1Skill1.setVisible(false);
            jpchar1Skill2.setVisible(false);
            jpchar1Skill3.setVisible(false);
            jpchar1Skill4.setVisible(false);            
            
            jpchar2Skill1.setVisible(true);
            jpchar2Skill2.setVisible(true);
            jpchar2Skill3.setVisible(true);
            jpchar2Skill4.setVisible(true);
            counter=31;
        }
    }
    
    public void setVisibleFalse() {
        btnPause.setVisible(false);
        
        jpchar1Skill1.setVisible(false);
        jpchar1Skill2.setVisible(false);
        jpchar1Skill3.setVisible(false);
        jpchar1Skill4.setVisible(false);
        
        jpchar1Skill1.setVisible(true);
        jpchar1Skill2.setVisible(true);
        jpchar1Skill3.setVisible(true);
        jpchar1Skill4.setVisible(true);
    }
    
    public void setFalse(){
       setVisibleFalse();
       btnUnpause.setVisible(false); // INDIVIDUAL CHANGE, SINCE IT HAS DIFFERENT VALUE ON PAUSE
    }
    
    @Override
    public void pause(){
        setVisibleFalse();
        btnUnpause.setVisible(true); // INDIIVIDUAL CHANGE, SINCE IT HAS DIFFERENT VALUE ON setFALSE
    }
    
    @Override
     public void gameWin(){
         if(player2hp<=0||player1hp<player2hp&&counter==0){
             player2hp=0;
             pgPlayer2.setValue(player2hp);
             setFalse();
             whenWin();
             JOptionPane.showMessageDialog(null, "Player 1 Wins","Congratulations",JOptionPane.INFORMATION_MESSAGE); 
             WinMenu();
             
         }else if(player1hp<=0){
             player1hp=0;
             pgPlayer1.setValue(player1hp);
             setFalse();
             whenWin();
             JOptionPane.showMessageDialog(null, "Player 2 Wins");
             WinMenu();
             
             
         }
     }
     
     @Override
     public void timer(){
         Thread time=new Thread(){
           public void run(){
               while(checker==1){
                   if(pause==0){
                       counter2--;
                       counter2--;
                   if(counter2==0){ 
                           counter--;
                           lblTime.setText(""+counter);   
                           if(counter==25){
                            if(turncount==1){
                            turncount=2;
                            turn();
                            checker=1;
                            
                        }else if(turncount==2){
                            turncount=1;  
                            turn();
                            checker=1;
                                
                        }
                       }
                       
                      }
                       
                   }
                    
               }
           }
       };
         
       time.start();
       
     }
     
     public void playerHp(){
         if(turncount==0){
             pgPlayer1.setValue(player1hp);
             pgPlayer2.setValue(player2hp);
             turncount=1;
             turn();
             
         }
         else if(turncount==1){
             pgPlayer1.setValue(player1hp);
             gameWin();
            
             
         }else if(turncount==2){
             pgPlayer2.setValue(player2hp);
             gameWin();
              
         }
     }
     @Override
     public void unPause(){
         pause=0;
          btnPause.setVisible(true);
        btnUnpause.setVisible(false);
        if(turncount==1){
        jpchar1Skill1.setVisible(true);
        jpchar1Skill2.setVisible(true);
        jpchar1Skill3.setVisible(true);
        jpchar1Skill4.setVisible(true);
        }else{
        jpchar2Skill1.setVisible(true);
        jpchar2Skill2.setVisible(true);
        jpchar2Skill3.setVisible(true);
        jpchar2Skill4.setVisible(true);
     }
    }
     
 public void whenWin(){
        bgm.stopBackgroundAudio();
        String filepath="src/Sounds/victory.wav";
        pause=1;
        try{
            File musicpath=new File(filepath);
            AudioInputStream audioInput= AudioSystem.getAudioInputStream(musicpath);
            Clip clip = AudioSystem.getClip();
            clip.open(audioInput);
            clip.start();
        }catch(Exception ex){
         
     }
 }
     
     public void whenDamage(){
        String filepath="src/Sounds/roblox.wav";
        
        try{
            File musicpath=new File(filepath);
            AudioInputStream audioInput= AudioSystem.getAudioInputStream(musicpath);
            Clip clip = AudioSystem.getClip();
            clip.open(audioInput);
            clip.start();
        }catch(Exception ex){
         
     }
                
                
            
     }
    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        // TODO add your handling code here:     
                pause=1;  
                pause();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnUnpauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnpauseActionPerformed
        // TODO add your handling code here:
        pause=0;
        unPause();
        btnUnpause.setVisible(false);
        btnPause.setVisible(true);
    }//GEN-LAST:event_btnUnpauseActionPerformed

    private void btnRematchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRematchActionPerformed
        // TODO add your handling code here:
        new pvp(choice1,choice2,bg,ch).setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_btnRematchActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        new Menu(ch).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnCharPickingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCharPickingActionPerformed
        // TODO add your handling code here:
        new PVPCharacterPicking(ch).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCharPickingActionPerformed

    public void DisableButtons()
    {
        jpchar1Skill2.setEnabled(false);
        jpchar1Skill3.setEnabled(false);
        jpchar1Skill4.setEnabled(false);
        jpchar2Skill2.setEnabled(false);
        jpchar2Skill3.setEnabled(false);
        jpchar2Skill4.setEnabled(false);
    }
    
    public void checkOrbs(int character, int orbs)
{
    switch (character)
    {
        case 1 -> { 
            if (orbs >= 2)
            {
                jpchar1Skill2.setEnabled(true);
            } else {
                jpchar1Skill2.setEnabled(false);
            }
            if (orbs >= 4)
            {
                jpchar1Skill3.setEnabled(true);
            } else {
                jpchar1Skill3.setEnabled(false);
            }
            if (orbs >= 6)
            {
                jpchar1Skill4.setEnabled(true);
            } else {
                jpchar1Skill4.setEnabled(false);
            }
            }
        case 2 -> { 
            if (orbs >= 2)
            {
                jpchar2Skill2.setEnabled(true);
            } else {
                jpchar2Skill2.setEnabled(false);
            }
            if (orbs >= 4)
            {
                jpchar2Skill3.setEnabled(true);
            } else {
                jpchar2Skill3.setEnabled(false);
            }
            if (orbs >= 6)
            {
                jpchar2Skill4.setEnabled(true);
            } else {
                jpchar2Skill4.setEnabled(false);
            }
            }
        default -> {
            }
        }        
    }
    
    @SuppressWarnings("empty-statement")
    public void skills(int choice, int skill, int turncount)
    {
        Random rand=new Random();
        int dmg;
        
        if (turncount == 1)
        {
            switch (choice) {
                case 1 -> {
                    switch (skill)
                    {
                        case 1 -> {
                            dmg=10;
                            player2hp-=dmg;
                            player1Orbs++;
                        }
                        case 2 -> {
                            dmg=rand.nextInt(10,15)+1;
                            player2hp-=dmg;
                        }
                        case 3 -> {
                            int randomHeal=rand.nextInt(20, 35)+1;
                            player1hp+=randomHeal;
                            if (player1hp > 100)
                            {
                                player1hp=100;
                            }
                            pgPlayer1.setValue(player1hp);
                        }
                        case 4 -> {
                            int heal=70; 
                            player1hp+=heal;
                            if (player1hp > 100)
                            {
                                player1hp=100;
                            }
                            pgPlayer1.setValue(player1hp);
                        }
                        default -> {
                            ;
                        }
                    }
                }
                case 2 -> {
                    switch (skill)
                    {
                        case 1 -> {
                            dmg=10;
                            player2hp-=dmg;
                            player1Orbs++;
                    }
                        case 2 -> { 
                            dmg=rand.nextInt(10,15)+1;
                            player2hp-=dmg;
                    }
                        case 3 -> {
                            int randomHeal=rand.nextInt(10, 15)+1;
                            player1hp+=randomHeal;
                        if (player1hp > 100) {
                            player1hp=100;
                        }
                        //pgPlayer1.setValue(player1hp);
                    }
                        case 4 -> {
                            dmg=50;
                            player2hp-=dmg;
                    }
                        default -> {
                            ;
                    }
                    }
                }
                case 3 -> {
                    switch (skill)
                    {
                        case 1 -> { 
                            dmg=10;
                            player2hp-=dmg;
                            player1Orbs++;
                    }
                        case 2 -> player1Orbs++;
                        case 3 -> {
                            int randomHeal=rand.nextInt(20, 35)+1;
                            player1hp+=randomHeal;
                            if (player1hp > 100)
                            {
                                player1hp=100;
                            }
                            pgPlayer1.setValue(player1hp);
                    }
                        case 4 -> {
                            dmg=30;
                            player2hp-=dmg;
                    }
                        default -> {
                            ;
                    }
                    }
                }
                case 4 -> {
                    switch (skill)
                    {
                        case 1 -> { 
                            dmg=10;
                            player2hp-=dmg;
                            player1Orbs++;
                    }
                        case 2 -> { 
                            dmg=rand.nextInt(10,15)+1;
                            player2hp-=dmg;
                    }
                        case 3 -> {
                            int randomHeal=rand.nextInt(20, 35)+1;
                            player1hp+=randomHeal;
                            if (player1hp > 100)
                            {
                                player1hp=100;
                            }
                            pgPlayer1.setValue(player1hp);
                    }
                        case 4 -> {
                            dmg=40;
                            player2hp-=dmg;
                    }
                        default -> {
                            ;
                    }
                    }
                }
                default -> {
                }
            }
        } 
        else if (turncount == 2)
        {
            switch (choice) {
                case 1 -> {
                    switch (skill)
                    {
                        case 1 -> { 
                            dmg=10;
                            player1hp-=dmg;
                            player2Orbs++;
                        }
                        case 2 -> { 
                            dmg=rand.nextInt(10,15)+1;
                            player1hp-=dmg;
                        }
                        case 3 -> {
                            int randomHeal=rand.nextInt(20, 35)+1;
                            player2hp+=randomHeal;
                            if (player2hp > 100)
                            {
                                player2hp=100;
                            }
                            pgPlayer2.setValue(player2hp);
                        }
                        case 4 -> {
                            int heal=70;
                            player2hp+=heal;
                            if (player2hp > 100)
                            {
                                player2hp=100;
                            }
                            pgPlayer2.setValue(player2hp);
                        }
                        default -> {
                            ;
                        }
                    }
                }

                case 2 -> {
                    switch (skill)
                    {
                        case 1 -> { 
                            dmg=10;
                            player1hp-=dmg;
                            player2Orbs++;
                        }
                        case 2 -> { 
                            dmg=rand.nextInt(10,15)+1;
                            player1hp-=dmg;
                        }
                        case 3 -> {
                            int randomHeal=rand.nextInt(10, 15)+1;
                            player1hp+=randomHeal;
                            if (player2hp > 100) {
                                player2hp=100;
                            }
                            //pgPlayer1.setValue(player1hp);
                        }
                        case 4 -> {
                            dmg=50;
                            player1hp-=dmg;
                        }
                        default -> {
                            ;
                        }
                    }
                }

                case 3 -> {
                    switch (skill)
                    {
                        case 1 -> { 
                            dmg=10;
                            player1hp-=dmg;
                            player2Orbs++;
                    }
                        case 2 -> player2Orbs++;
                        case 3 -> {
                            int randomHeal=rand.nextInt(20, 35)+1;
                            player2hp+=randomHeal;
                            if (player2hp > 100)
                            {
                                player2hp=100;
                            }
                            pgPlayer2.setValue(player2hp);
                    }
                        case 4 -> {
                            dmg=30;
                            player1hp-=dmg;
                    }
                        default -> {
                            ;
                    }
                    }
                }
                case 4 -> {
                    switch (skill)
                    {
                        case 1 -> { 
                            dmg=10;
                            player1hp-=dmg;
                            player2Orbs++;
                    }
                        case 2 -> { 
                            dmg=rand.nextInt(10,15)+1;
                            player1hp-=dmg;
                    }
                        case 3 -> {
                            int randomHeal=rand.nextInt(20, 35)+1;
                            player2hp+=randomHeal;
                            if (player2hp > 100)
                            {
                                player2hp=100;
                            }
                            pgPlayer2.setValue(player2hp);
                    }
                        case 4 -> {
                            dmg=40;
                            player1hp-=dmg;
                    }
                        default -> {
                            ;
                    }
                    }
                }
                default -> {
                }
            }
        }        
    }
    
    
    
    private void jpchar1Skill1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar1Skill1MouseClicked

        skill=1;
        skills(choice1, skill, turncount);
        turncount=2;
        turn();
        whenDamage();
        playerHp();
        lblOrbs1.setText("Orbs "+ player1Orbs);        
    }//GEN-LAST:event_jpchar1Skill1MouseClicked

    private void jpchar2Skill1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar2Skill1MouseClicked
        skill=1;
        skills(choice2, skill, turncount);
        turncount=1;
        turn();
        whenDamage();
        playerHp();
        lblOrbs2.setText("Orbs "+ player2Orbs);
    }//GEN-LAST:event_jpchar2Skill1MouseClicked

    
    
    private void jpchar1Skill2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar1Skill2MouseClicked
        skill=2;
        skills(choice1, skill, turncount);
        player1Orbs-=2;

        if(player1Orbs < 0) {
            player1Orbs = 0;
        }

        checkOrbs(choice1, player1Orbs);

        lblOrbs1.setText("Orbs "+ player1Orbs);  
        turncount=2;
        turn();
        whenDamage();
        playerHp();
    }//GEN-LAST:event_jpchar1Skill2MouseClicked

    private void jpchar1Skill3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar1Skill3MouseClicked
        skill=3;
        skills(choice1, skill, turncount);
        player1Orbs-=4;

        if(player1Orbs < 0) {
            player1Orbs = 0;
        }

        checkOrbs(choice1, player1Orbs);

        lblOrbs1.setText("Orbs "+ player1Orbs);  
        turncount=2;
        turn();
        whenDamage();
        playerHp();
    }//GEN-LAST:event_jpchar1Skill3MouseClicked

    private void jpchar1Skill4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar1Skill4MouseClicked
        skill=4;
        skills(choice1, skill, turncount);
        player1Orbs-=6;

        if(player1Orbs < 0) {
            player1Orbs = 0;
        }

        checkOrbs(choice1, player1Orbs);

        lblOrbs1.setText("Orbs "+ player1Orbs);  
        turncount=2;
        turn();
        whenDamage();
        playerHp();
    }//GEN-LAST:event_jpchar1Skill4MouseClicked

    private void jpchar2Skill2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar2Skill2MouseClicked
        skill=2;
        skills(choice2, skill, turncount);
        player2Orbs-=2;

        if(player2Orbs < 0) {
            player2Orbs = 0;
        }

        checkOrbs(choice2, player2Orbs);

        lblOrbs2.setText("Orbs "+ player2Orbs);  
        turncount=1;
        turn();
        whenDamage();
        playerHp();
    }//GEN-LAST:event_jpchar2Skill2MouseClicked

    private void jpchar2Skill3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar2Skill3MouseClicked
        skill=3;
        skills(choice2, skill, turncount);
        player2Orbs-=4;

        if(player2Orbs < 0) {
            player2Orbs = 0;
        }

        checkOrbs(choice2, player2Orbs);

        lblOrbs2.setText("Orbs "+ player2Orbs);  
        turncount=1;
        turn();
        whenDamage();
        playerHp();
    }//GEN-LAST:event_jpchar2Skill3MouseClicked

    private void jpchar2Skill4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpchar2Skill4MouseClicked
        skill=4;
        skills(choice2, skill, turncount);
        player2Orbs-=6;

        if(player2Orbs < 0) {
            player2Orbs = 0;
        }

        checkOrbs(choice2, player2Orbs);

        lblOrbs2.setText("Orbs "+ player2Orbs);  
        turncount=1;
        turn();
        whenDamage();
        playerHp();
    }//GEN-LAST:event_jpchar2Skill4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pvp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pvp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pvp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pvp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pvp().setVisible(true);               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Skill1p1;
    private javax.swing.JLabel Skill1p2;
    private javax.swing.JLabel Skill2p1;
    private javax.swing.JLabel Skill2p2;
    private javax.swing.JLabel Skill3p1;
    private javax.swing.JLabel Skill3p2;
    private javax.swing.JLabel Skill4p1;
    private javax.swing.JLabel Skill4p2;
    private javax.swing.JButton btnCharPicking;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnRematch;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnUnpause;
    private javax.swing.JPanel jpchar1Skill1;
    private javax.swing.JPanel jpchar1Skill2;
    private javax.swing.JPanel jpchar1Skill3;
    private javax.swing.JPanel jpchar1Skill4;
    private javax.swing.JPanel jpchar2Skill1;
    private javax.swing.JPanel jpchar2Skill2;
    private javax.swing.JPanel jpchar2Skill3;
    private javax.swing.JPanel jpchar2Skill4;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblOrbs1;
    private javax.swing.JLabel lblOrbs2;
    private javax.swing.JLabel lblPlayer1;
    private javax.swing.JLabel lblPlayer2;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel p1Name;
    private javax.swing.JLabel p2Name;
    private javax.swing.JProgressBar pgPlayer1;
    private javax.swing.JProgressBar pgPlayer2;
    private javax.swing.JPanel pnlWin;
    // End of variables declaration//GEN-END:variables
}
